#!/usr/bin/env perl

=head1 NAME

    zd - ZabbixCLI Dashboard

=head1 SYNOPSIS

    zd [-c] [-v] [-p] [-l n] [-g group_name,group_name...]
    zd [-c] [-v] [-p] [-l n] [-s screen_name,screen_name...]
    zd [-c] [-v] [-p] [-l n] [-h host_name,host_name...]

=head2 Options

=over 4

=item -p

Priority output

=item -l

Number of last tickets

=item -g

Group list

=item -s

Screen list

=item -h

Host list

=item -c

Disable/enable coloured output (Automatically inverted if not tty).

=back

=cut

use warnings;
use strict;
use Data::Dumper;
use FindBin '$RealBin';
use lib "$RealBin/../lib";
use config;
use Net::Zabbix;
use Getopt::Long;
use Pod::Usage;

binmode(STDOUT, ":utf8");

my $resourcetype_dict = {
	GRAPH => 0,
	SIMPLE_GRAPH => 1,
	MAP => 2,
	PLAIN_TEXT => 3,
	HOSTS_INFO => 4,
	TRIGGERS_INFO => 5,
	SERVER_INFO => 6,
	CLOCK => 7,
	SCREEN => 8,
	TRIGGERS_OVERVIEW => 9,
	DATA_OVERVIEW => 10,
	URL => 11,
	HISTORY_OF_ACTIONS => 12,
	HISTORY_OF_EVENTS => 13,
	LATEST_HOST_GROUP_ISSUES => 14,
	SYSTEM_STATUS => 15,
	LATEST_HOST_ISSUES => 16,
	SIMPLE_GRAPH_PROTOTYPE => 19,
	GRAPH_PROTOTYPE => 20,
};

my $config = config->new("$RealBin/../etc/config");
my @dashboard_colors = $config->{dashboard_colors} ? split(/\s+/, $config->{dashboard_colors}) : (0, 96, 93, 91, 31, 41);

Getopt::Long::Configure("bundling");
GetOptions(
    "help|?" => sub { usage() },
    "verbose|v+" => \$config->{verbose},
    "debug" => \$config->{debug},
    "limit|l=s" => \$config->{dashboard_limit},
    "no-colors|c" => \$config->{dashboard_no_colors},
    "priority|p" => \$config->{dashboard_priority_output},
    "groups|g=s" => \$config->{dashboard_groups_list},
    "screen|s=s" => \$config->{dashboard_screen_list},
    "hosts|h=s" => \$config->{hosts_list},
    "show-no-active|A" => \$config->{show_no_active}
);

$config->{dashboard_limit} ||= 30;
$config->{dashboard_no_colors} = $config->{dashboard_no_colors} ? 0 : 1 if not -t STDOUT;

my $z= Net::Zabbix->new(
    $config->{'zabbix-url'},
    $config->{'zabbix-username'},
    $config->{'zabbix-password'},
    $config->{debug},
);

if ($config->{hosts_list}) {
    my @hostid_list;
    foreach my $query (split(/[\s,:]/, $config->{hosts_list})) {
        $query = "*".$query."*" if $config->{searchWildcardsEnabled} and $query !~ /\*/;
        my $hosts = $z->get('host', {
            search => {
                name => $query,
                ip => $query,
            },
            searchByAny => 1,
            searchWildcardsEnabled => $config->{searchWildcardsEnabled},
            sortfield => "name",
        });

        zabbix_error($hosts);

        foreach my $host (@{ $hosts->{result} }) {
            push @hostid_list, $host->{hostid};
        }

        show_triggers(undef, \@hostid_list);
    }
} elsif ($config->{dashboard_screen_list}) {
    foreach my $screen_query (split /[\s,:]/, $config->{dashboard_screen_list}) {
        my $screens = $z->get('screen', {
            #output => "extend",
            selectScreenItems => "extend",
            search => {
                name => $screen_query,
            },
        });
        # print Dumper($screens);exit;
        zabbix_error($screens);

        foreach my $screen (@{ $screens->{result} }) {
            my $screen_name = $screen->{name};

            foreach my $screen_item (@{ $screen->{screenitems} }) {
				next if $screen_item->{resourcetype} ne $resourcetype_dict->{LATEST_HOST_GROUP_ISSUES};
                my $groupid = $screen_item->{resourceid};

                my $groups = $z->get('hostgroup', {
                    groupids => $groupid,
                });

                zabbix_error($groups);

                if ($groups->{result} and $#{ $groups->{result} } >=0) {
                    my $group_name = $groups->{result}[0]->{name};
                    print "[$screen_name] $group_name:\n";
                    show_triggers($groupid);
                }
            }
        }
    }
} elsif ($config->{dashboard_groups_list}) {
    foreach my $group_name (split /[\s,:]/, $config->{dashboard_groups_list}) {
        my $groups = $z->get('hostgroup', {
            search => {
                name => $group_name,
            },
            searchWildcardsEnabled => 1,
        });

        zabbix_error($groups);

        foreach my $group (@{ $groups->{result} }) {
            print $group->{name} . ":\n";
            show_triggers($group->{groupid});
        }
    }
} else {
    show_triggers();
}

sub show_triggers {
    my ($groupid, $hostid_list) = @_;

    my $filter = {};
    $filter->{value} = 1 unless $config->{show_no_active};

    my $triggers = $z->get('trigger', {
        skipDependent => 1,
        monitored => 1,
        filter => $filter,
        limit => $config->{dashboard_limit},
        expandDescription => 1,
        expandExpression => 1,
        selectHosts => [ "hostis", "name" ],
        sortfield => $config->{dashboard_priority_output} ? [ "priority", "lastchange" ] : [ "lastchange" ],
        sortorder => "DESC",
        groupids => $groupid,
        hostids => $hostid_list,
    });

# print Dumper($triggers);exit;

    zabbix_error($triggers);

    my $max_hostname_len = 0;
    my $max_description_len = 0;

    foreach (@{ $triggers->{result} }) {
        $max_hostname_len = length($_->{hosts}[0]->{name}) if $max_hostname_len < length($_->{hosts}[0]->{name});
        $max_description_len = length($_->{description}) if $max_description_len < length($_->{description});
    }

    foreach my $trigger (@{ $triggers->{result} }) {
        next if ! $trigger->{hosts} or ! $trigger->{hosts}[0]->{name};
        print "\t" if $groupid;

        if ($config->{dashboard_no_colors}) {
            printf("%-${max_hostname_len}s | %-${max_description_len}s | %s\n",
                        $trigger->{hosts}[0]->{name},
                        $trigger->{description},
                        get_age($trigger->{lastchange}));
        } else {
            my $color = "\033[" . $dashboard_colors[$trigger->{priority}] . "m";
            printf("\033[0m%-${max_hostname_len}s\033[m | $color%-${max_description_len}s\033[m | \033[90m%s\033[m\n",
                        $trigger->{hosts}[0]->{name},
                        $trigger->{description},
                        get_age($trigger->{lastchange}));
        }

        if ($config->{verbose} and $config->{verbose} > 1) {
            print "\t" if $groupid;
            print "\033[90m" unless $config->{dashboard_no_colors};

            if ($trigger->{templateid}) {
                my $templates = $z->get('template', {
                    templateids => $trigger->{templateid},
                });

                zabbix_error($templates);

                if ($templates->{result} and $#{ $templates->{result} } >=0) {
                    print utf8($templates->{result}[0]->{host}) . ": ";
                }
            }

            print "\t" . $trigger->{expression} . "\n";
            print "\033[m" unless $config->{dashboard_no_colors};
        }
    }
}

sub zabbix_error {
    my ($obj) = @_;
    unless ($obj->{result}) {
        if ($obj->{error}) {
            print $obj->{error}->{message} . "\n" . $obj->{error}->{data} . "\n";
            exit 1;
        } else {
            die "unknown error";
        }
    }
}

sub get_age {
    my ($lastchange) = @_;
    require Time::Ago;
    my $age = Time::Ago->in_words(time - $lastchange);

    if ($config->{verbose}) {
        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($lastchange);
        $age = sprintf("%02d.%02d.%04d %02d:%02d:%02d (%s)", $mday, $mon + 1, $year + 1900, $hour, $min, $sec, $age) ;
    }

    return $age;
}

sub usage {
    pod2usage(1);
    exit;
}
