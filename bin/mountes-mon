#!/usr/bin/env perl

=head1 NAME

Moutes mon

=head1 DESCRIPTION

Create NFS mount monitoring templates

=head1 USAGE

mountes-mon [-r] [-e] [-d] [-v] [-u user] [-k ssh-key] [-K] server --do

=head2 Options

=over

=item help (h)

This message

=item verbose (v)

Verbose mode

=item ssh-user (u)

SSH user

=item ssh-key (k)

SSH key

=item ssh-options (o)

SSH options

=item key-checking-no (n)

No cheack SSH known_hosts

=item disable-config-ssh-key (K)

Disable SSH key set in config

=item enabled-only (e)

Enabled only hosts in zabbix

=item disabled-only (d) 

Enabled only hosts in zabbix

=item regexp (r)

Use regex in query

=item --do

Do! No check mode

=item show (s)

Show templates

=back

=cut



use strict;
use warnings;
use Data::Dumper;
use File::Basename;
use Getopt::Long;
use Pod::Usage;
use File::Path qw/ make_path /;
use File::Temp qw/ tempfile tempdir /;
use FindBin '$RealBin';
use lib "$RealBin/../lib";
use config;
use Net::Zabbix;
use host;
use menu;
use ssh;
use templates;

our $config = config->new("$RealBin/../etc/config", {
    'mount-options' => '',
    'mount-dir' => '~/sshfs/$hostname',
});

Getopt::Long::Configure ("bundling");
GetOptions(
    "help|h|?" => sub { usage() },
    "verbose|v+" => \$config->{verbose},
    "debug" => \$config->{debug},
    "ssh-user|u=s" =>\$config->{'ssh-user'},
    "ssh-key|k=s" => \$config->{'ssh-key'},
    "ssh-options|o=s" => \$config->{'ssh-options'},
    "key-checking-no|n" => sub {
        $config->{'ssh-options'} .= ' -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no ';
    },
    "disable-config-ssh-key|K" => sub { $config->{'ssh-key'} = '' },
    "enabled-only|e" => \$config->{'enabled-only'},
    "disabled-only|d" => \$config->{'disabled-only'},
    "regexp|r" => \$config->{'regexp'},
    "do" => \$config->{'do'},
    "show|s" => \$config->{'show'},
);

print Dumper($config) if $config->{'debug'};

my $host_obj = host->new($config);

foreach my $query (@ARGV) {
    my @search = @{$host_obj->search($query, {searchByAny => 1})};

    if ($config->{do}) {
        my $mountes = get_mounts_from_fstab(@search);

        while (my ($hostname, $mountes_list) = each %$mountes) {
            my $host_id;

            foreach (@search) {
                $host_id = $_->{hostid} if $_->{host} eq $hostname;
            }

            create_and_link_zabbix_templates($host_id, $hostname, $mountes_list);
        }
    } else {
        if ($config->{'show'}) {
            my $mountes = get_mounts_from_fstab(@search);
            
            while (my ($host, $mountes_list) = each %$mountes) {
                print $host . "\n";
                print "\t$_\n" foreach @$mountes_list;
                print "\n";
            }
        } else {
            $host_obj->show_results(\@search, {
                verbose => $config->{verbose},
            });
        }
    }
}

sub get_mounts_from_fstab {
    my $h = {};
    foreach my $host (@_) {
        my $interfaces = $host_obj->get_interfaces($host);
        my $ip;

        if (ref $interfaces->{agent} eq 'ARRAY') {
            my $iface_menu = menu->new();
            $iface_menu->make('ip', $interfaces->{agent});
            $ip = $iface_menu->show();
        } else {
            $ip = $interfaces->{agent}->{ip} ||= $interfaces->{agent}->{dns};
        }

        print "iface: $ip\n" if $config->{'debug'};

        print "Connect to $host->{host}\n" if $config->{'verbose'};
        my $ssh = ssh->new($config);

        my $cmd = 'grep -Eo "([0-9]{1,3}\.){3}[0-9]{1,3}:/vol/[0-9a-z]+" /etc/fstab';
        my @mounts = $ssh->ssh($ip, $host->{host}, $cmd);
        map { chomp } @mounts;
        $h->{ $host->{name} } = \@mounts;
    }
    return $h;
}

sub create_and_link_zabbix_templates {
    my ($host_id, $hostname, $mountes_list) = @_;

    my $t = templates->new($config);

    foreach my $mount (@$mountes_list) {
        my ($mount_ip, $path) = split(/:/, $mount);
        my @dirs = split(/\//, $path);
        my $vol = pop(@dirs);
        my $template_name = "Template mount-mon $mount_ip $vol";

        if ($t->chk_template_is_exist($template_name)) {
            my $templates_list = $t->get_template_ids_by_name($template_name);
            foreach (@$templates_list) {
                my ($id, $name) = each %$_;
                print "Link template \"$name\" to $hostname\n";
                $t->link_template($host_id, $id);
            }
        } else {
            print "Create template \"$template_name\"\n";
            my $template_id = $t->create_template($template_name, 1);
            my $key = "system.run[\"mount|grep '$mount' >/dev/null && ( echo 1 ) || ( echo 0 )\"]";
            my $item_id = $t->create_item($template_id, "$vol is mounted", $key);
            my $expression = "{$template_name:$key.last()}=0";
            $t->create_trigger("$vol not mounted", $template_id, $template_name, $key, $expression, 4);
            print "Link template to host $hostname\n";
            $t->link_template($host_id, $template_id);
        }
    }
}

sub usage {
    pod2usage(1);
    exit;
}
