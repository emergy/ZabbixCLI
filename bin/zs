#!/usr/bin/env perl

=head1 NAME

    zs - ZabbixCLI server communicate tool

=head1 SYNOPSIS

    zs [-s] [-v] - Search hosts and print addresses
    zs [-u ssh_user] [-k identity_file] [-n] [-K] [-U]
       [-c command] [-e] [-d] [-r] [-m] <query> [query] [query]...

=head2 Options

=over 4

=item -h 

This message.

=item -v

Verbose mode.

=item -s

Search hosts mode.

=item -u

SSH username.

=item -k

Selects a file from which the identity (private key) for public key authentication
is read.  The default is ~/.ssh/identity for protocol version 1, and ~/.ssh/id_dsa,
~/.ssh/id_ecdsa and ~/.ssh/id_rsa for protocol version 2.
Default option value may set in config.

=item -n

Not check known_hosts file.

=item -K

Disable default identity file set in config.

=item -c

Execute command of SSH.

=item -e

Return only enabled hosts.

=item -d

Return only disabled hosts.

=item -r

Use regexport in query (zs -r 'server-\d\d\d')

=item -m

Mount mode. Mount via SSHFS changed host. Mount target may set in config

=item -U

Custom key and user (See config)

=item -S

Disable menu autoselect

=back

=cut

use strict;
use warnings;
use Data::Dumper;
use File::Basename;
use Getopt::Long;
use Pod::Usage;
use File::Path qw/ make_path /;
use File::Temp qw/ tempfile tempdir /;
use FindBin '$RealBin';
use lib "$RealBin/../lib";
use config;
use Net::Zabbix;
use host;
use menu;
use ssh;

our $config = config->new("$RealBin/../etc/config", {
    'mount-options' => '',
    'mount-dir' => '~/sshfs/$hostname',
});

Getopt::Long::Configure ("bundling");
GetOptions(
    "help|h|?" => sub { usage() },
    "verbose|v+" => \$config->{verbose},
    "debug" => \$config->{debug},
    "search|s" => \$config->{ssh},
    "ssh-user|u=s" =>\$config->{'ssh-user'},
    "ssh-key|k=s" => \$config->{'ssh-key'},
    "ssh-options|o=s" => \$config->{'ssh-options'},
    "key-checking-no|n" => sub {
        $config->{'ssh-options'} .= ' -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no ';
    },
    "disable-config-ssh-key|K" => sub { $config->{'ssh-key'} = '' },
    "ssh-command|c=s" => \$config->{'ssh-command'},
    "enabled-only|e" => \$config->{'enabled-only'},
    "disabled-only|d" => \$config->{'disabled-only'},
    "mount|m" => \$config->{'mount'},
    "regexp|r" => \$config->{'regexp'},
    "U" => sub {
        $config->{'ssh-key'} = $config->{'ssh-custom-key'},
        $config->{'ssh-user'} = $config->{'ssh-custom-user'},
    },
    "disable-cache-menu|S" => \$config->{'disable_cache_menu'},
); 



print Dumper($config) if $config->{'debug'};

my $host_obj = host->new($config);

usage() if $#ARGV < 0;

foreach my $query (@ARGV) {
    my @search = @{$host_obj->search($query, {searchByAny => 1})};
    next if $#search < 0;
    
    # SSH 
    if ((! $config->{ssh}) or $config->{'ssh-command'} or $config->{'mount'}) {

        # if ssh-command
        #
        if ($config->{'ssh-command'}) {
            foreach my $host (@search) {
                print "Execute $host->{host} command: $config->{'ssh-command'}\n" if $config->{'debug'} or $config->{verbose};

                my $interfaces = $host_obj->get_interfaces($host);
                my $ip;

                if (ref $interfaces->{agent} eq 'ARRAY') {
                    my $iface_menu = menu->new({
                        disable_cache_menu => $config->{disable_cache_menu},
                    });
                    $iface_menu->make('ip', $interfaces->{agent});
                    $ip = $iface_menu->show();
                } else {
                    $ip = $interfaces->{agent}->{ip} ||= $interfaces->{agent}->{dns};
                }
                
                print "iface: $ip\n" if $config->{'debug'};
                
                print "Connect to $host->{host}\n" if $config->{'verbose'};
                my $ssh = ssh->new($config);
                print $ssh->ssh($ip, $host->{host}) . "\n";
            }

        # unless ssh-command
        #
        } else {
            # Create and show menu
            my $menu = menu->new({
                auto_change => 1,
                disable_cache_menu => $config->{disable_cache_menu},
            });
            $menu->make('host', \@search);
            my $change = $menu->show();
    
            # Get network interfaces information
            my $interfaces = $host_obj->get_interfaces($change);
            print "\$interfaces: " . Dumper($interfaces) . "\n" if $config->{'debug'};
            my $ip;
    
            # Debug
            print "ssh-command: $config->{'ssh-command'}\n" if $config->{'debug'};

            # If exist agent interface connect this
            if ($interfaces->{agent}) {

                # Show interfaces menu, if agent interfaces not only one
                if (ref $interfaces->{agent} eq 'ARRAY') {
                    my $iface_menu = menu->new({
                        disable_cache_menu => $config->{disable_cache_menu},
                    });
                    $iface_menu->make('ip', $interfaces->{agent});
                    $ip = $iface_menu->show()->{ip};
                } else {
                    $ip = $interfaces->{agent}->{ip} ||= $interfaces->{agent}->{dns};
                }
            } elsif ($config->{'mount'}) {

            } else {

                # Use host name for connect
                $ip = $change->{host};
            }

            my $ssh = ssh->new($config);
            $ssh->ssh($ip, $change->{host});
        }

    } else {
        # Just show find result
        $host_obj->show_results(\@search, {
            verbose => $config->{verbose},
        });
    }
}

sub usage {
    pod2usage(1);
    exit;
}
