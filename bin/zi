#!/usr/bin/env perl

=head1 NAME

zi - IPMI Tool for ZabbixCLI

=head1 SYNOPSIS

       zi [-v] [-r] <query> <command>
                -e          Enabled hosts only
                -d          Disabled hosts only
                --help      Thise message
                --help-all  Verbose help

=head1 EXAMPLES

=over 4

=item B<zi exemple.host.corp 'power <on|off|reset|soft>'>

Performs a chassis control command to view and change the power state.

=item B<zi exemple.host.corp 'user list'>

Displays a list of user information for all defined userids.

=item B<zi exemple.host.corp 'user set name <userid> <username>'>

Sets the username associated with the given userid.

=item B<zi exemple.host.corp 'user set password <userid> [<password>]'>

Sets the password for the given userid. If no password is given, the password 
is cleared (set to the NULL password). Be careful when removing passwords 
from administrator-level accounts.

=item B<zi exemple.host.corp 'user disable|enable <userid>'>

Disables|Enables access to the BMC by the given userid.

=item B<zi exemple.host.corp 'session info all'>

=item B<zi exemple.host.corp 'sdr'>

=item B<zi exemple.host.corp 'sensor'>

=item B<zi exemple.host.corp 'sel time get'>

=item B<zi exemple.host.corp 'sel time set <time string>'>

Sets the SEL clock. Future SEL entries will use the time set by this command.
<time string> is of the form "MM/DD/YYYY HH:MM:SS". Note that hours are in 
24-hour form. It is recommended that the SEL be cleared before setting the time.

=item B<zi exemple.host.corp 'sol activate'>

Special escape sequences are provided to control the SOL session:
        ~.     Terminate connection
        ~^Z    Suspend ipmitool
        ~B     Send break
        ~~     Send the escape character by typing it twice
        ~?     Print the supported escape sequences

For enable sol on Linux host add "console=ttyS1,115200" to kernel params

   More information about IPMItool see in documentation page:
       http://ipmitool.sourceforge.net/manpage.html

=cut

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use FindBin '$RealBin';
use Pod::Usage;
use lib "$RealBin/../lib";
use Net::Zabbix;
use config;
use host;
use menu;

our $config = config->new("$RealBin/../etc/config");

Getopt::Long::Configure ("bundling");
GetOptions(
    "help|h|?" => sub { usage() },
    "help-all" => sub { usage(2) },
    "verbose|v+" => \$config->{verbose},
    "debug" => \$config->{debug},
    "enabled-only|e" => \$config->{'enabled-only'},
    "disabled-only|d" => \$config->{'disabled-only'},
    "regexp|r" => \$config->{'regexp'},
);

print Dumper($config) if $config->{debug};

my ($query, $command) = @ARGV;
usage() unless $query;

my $host_obj = host->new($config);
my $search = $host_obj->search($query, {searchByAny => 1});

if ($command) {
    if ($#$search == 0) {
        ipmi(shift(@$search));
    } elsif ($#$search > 0) {
        my $menu = menu->new({auto_change => 1});
        $menu->make('host', $search);
        my $change = $menu->show();

        ipmi($change);
    }
} else {
    $host_obj->show_results($search, {
        verbose => $config->{verbose},
        interface => 'ipmi',
    });
}

sub ipmi {
    my ($host) = @_;
    my $interfaces = $host_obj->get_interfaces($host);

    my $_host = $interfaces->{ipmi}->{ip} ||= $interfaces->{ipmi}->{dns};
    my $_user = $host->{ipmi_username};
    my $_pass = $host->{ipmi_password};

    my $exec = "ipmitool ";
    $exec .= "-v " if $config->{verbose};
    $exec .= "-I lanplus -H $_host -U $_user -P $_pass $command";

    print $exec . "\n";
    system($exec);
}

sub usage {
    pod2usage({-verbose => $_[0]});
    exit;
}
